facet_wrap(~architecture, nrow = 1) +
labs(
x     = "Number of Loci",
y     = "Genetic Variance",
title = "Effect of Number of Loci on Genetic Variance",
color = "Variance\nComponent",
fill  = "Variance\nComponent"
) +
scale_color_manual(values = pal_comp) +
scale_fill_manual(values = pal_comp) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(breaks = seq(min(loci_range), max(loci_range), length.out = 5)) +
theme_minimal() +
theme(
panel.border    = element_rect(color = "darkgray", fill = NA, size = 1),
legend.position = "bottom",
legend.title    = element_text(size = 14),
legend.text     = element_text(size = 12),
plot.title      = element_text(size = 20),
axis.title      = element_text(size = 16),
axis.text       = element_text(size = 14)
)
l
loci_range <- seq(4, 100, by=2)
p1 <- ggplot(loci_long, aes(x = loci, y = mean,
color = component, fill = component)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax), alpha = 0.2, color = NA) +
geom_line(size = 1.2) +
facet_wrap(~architecture, nrow = 1) +
labs(
x     = "Number of Loci",
y     = "Genetic Variance",
title = "Effect of Number of Loci on Genetic Variance",
color = "Variance\nComponent",
fill  = "Variance\nComponent"
) +
scale_color_manual(values = pal_comp) +
scale_fill_manual(values = pal_comp) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(breaks = seq(min(loci_range), max(loci_range), length.out = 5)) +
theme_minimal() +
theme(
panel.border    = element_rect(color = "darkgray", fill = NA, size = 1),
legend.position = "bottom",
legend.title    = element_text(size = 14),
legend.text     = element_text(size = 12),
plot.title      = element_text(size = 20),
axis.title      = element_text(size = 16),
axis.text       = element_text(size = 14)
)
######## STEP 2: Selection strength sweep #########
sigma_values <- seq(1, 10, length.out=100)
p2 <- ggplot(sigma_long, aes(x = sigma, y = mean,
color = component, fill = component)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax), alpha = 0.2, color = NA) +
geom_line(size = 1.2) +
facet_wrap(~architecture, nrow = 1) +
labs(
x     = "Selection Strength (σ)",
y     = "Genetic Variance",
title = "Effect of Selection Strength on Genetic Variance",
color = "Variance\nComponent",
fill  = "Variance\nComponent"
) +
scale_color_manual(values = pal_comp) +
scale_fill_manual(values = pal_comp) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(breaks = seq(1, 10, by = 2)) +
theme_minimal() +
theme(
panel.border    = element_rect(color = "darkgray", fill = NA, size = 1),
legend.position = "bottom",
legend.title    = element_text(size = 14),
legend.text     = element_text(size = 12),
plot.title      = element_text(size = 20),
axis.title      = element_text(size = 16),
axis.text       = element_text(size = 14)
)
######## STEP 3: Population size sweep #########
N_values <- c(100, 250, 500, 1000, 1500, 2000)
p3 <- ggplot(N_long, aes(x = N, y = mean,
color = component, fill = component)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax), alpha = 0.2, color = NA) +
geom_line(size = 1.2) +
facet_wrap(~architecture, nrow = 1) +
labs(
x     = "Population Size (N)",
y     = "Genetic Variance",
title = "Effect of Population Size on Genetic Variance",
color = "Variance\nComponent",
fill  = "Variance\nComponent"
) +
scale_color_manual(values = pal_comp) +
scale_fill_manual(values = pal_comp) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(breaks = N_values) +
theme_minimal() +
theme(
panel.border   = element_rect(color = "darkgray", fill = NA, size = 1),
legend.position = "bottom",
legend.title   = element_text(size = 14),
legend.text    = element_text(size = 12),
plot.title     = element_text(size = 20),
axis.title     = element_text(size = 16),
axis.text      = element_text(size = 14)
)
pal_b <- c("FALSE" = "darkblue", "TRUE" = "darkred")
p4 <- ggplot(df_time_sum,
aes(x = time, y = mean_diff,
color = factor(bottleneck),
fill  = factor(bottleneck))) +
geom_ribbon(aes(ymin = min_diff, ymax = max_diff),
alpha = 0.2, color = NA) +
geom_line(size = 1.2) +
facet_wrap(~architecture, nrow = 1) +
scale_color_manual(
name   = "Bottleneck",
values = pal_b,
labels = c("No", "Yes")
) +
scale_fill_manual(
name   = "Bottleneck",
values = pal_b,
labels = c("No", "Yes")
) +
labs(
x     = "Generations after optimum shift",
y     = expression("|mean phenotype – optimum|"),
title = "Response to selection with vs. without bottleneck"
) +
theme_minimal() +
theme(
panel.border    = element_rect(color = "darkgray", fill = NA, size = 1),
legend.position = "bottom",
plot.title      = element_text(size = 18),
axis.title      = element_text(size = 14),
axis.text       = element_text(size = 12)
)
# Print plots
print(p1)
print(p2)
print(p3)
View(p3)
View(N_long)
View(loci_long)
df_N <- N_long
# and tidy up for plotting
N_long <- tidy_variance(df_N, "N")
p3 <- ggplot(N_long, aes(x = N, y = mean,
color = component, fill = component)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax), alpha = 0.2, color = NA) +
geom_line(size = 1.2) +
facet_wrap(~architecture, nrow = 1) +
labs(
x     = "Population Size (N)",
y     = "Genetic Variance",
title = "Effect of Population Size on Genetic Variance",
color = "Variance\nComponent",
fill  = "Variance\nComponent"
) +
scale_color_manual(values = pal_comp) +
scale_fill_manual(values = pal_comp) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(breaks = N_values) +
theme_minimal() +
theme(
panel.border   = element_rect(color = "darkgray", fill = NA, size = 1),
legend.position = "bottom",
legend.title   = element_text(size = 14),
legend.text    = element_text(size = 12),
plot.title     = element_text(size = 20),
axis.title     = element_text(size = 16),
axis.text      = element_text(size = 14)
)
print(p3)
print(p4)
df_time <- df_time_sum
# summarise
df_time_sum <- df_time %>%
group_by(architecture, bottleneck, time) %>%
summarise(
mean_diff = mean(diff),
min_diff  = min(diff),
max_diff  = max(diff),
.groups   = "drop"
)
pal_b <- c("FALSE" = "darkblue", "TRUE" = "darkred")
p4 <- ggplot(df_time_sum,
aes(x = time, y = mean_diff,
color = factor(bottleneck),
fill  = factor(bottleneck))) +
geom_ribbon(aes(ymin = min_diff, ymax = max_diff),
alpha = 0.2, color = NA) +
geom_line(size = 1.2) +
facet_wrap(~architecture, nrow = 1) +
scale_color_manual(
name   = "Bottleneck",
values = pal_b,
labels = c("No", "Yes")
) +
scale_fill_manual(
name   = "Bottleneck",
values = pal_b,
labels = c("No", "Yes")
) +
labs(
x     = "Generations after optimum shift",
y     = expression("|mean phenotype – optimum|"),
title = "Response to selection with vs. without bottleneck"
) +
theme_minimal() +
theme(
panel.border    = element_rect(color = "darkgray", fill = NA, size = 1),
legend.position = "bottom",
plot.title      = element_text(size = 18),
axis.title      = element_text(size = 14),
axis.text       = element_text(size = 12)
)
print(p4)
me <- 0.03
u <- 1e-09
acs <- 5e+06
gen <- 10000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
me <- 0.03
u <- 1e-09
acs <- 5e+06
gen <- 1000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
me <- 0.03
u <- 1e-09
acs <- 5e+06
gen <- 1000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0.8,1), col = "blue")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
me <- 0.03
u <- 1e-09
acs <- 5e+06
gen <- 1000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
me <- 0.03
u <- 1e-09
acs <- 5e+07
gen <- 1000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
me <- 0.03
u <- 1e-09
acs <- 1e+07
gen <- 1000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
me <- 0.03
u <- 1e-09
acs <- 2e+07
gen <- 1000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
plot(fit, type = "l", ylim = c(0,1), col = "blue",
ylab = "Fitness", xlab = "Generations")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
me <- 0.03
u <- 1e-09
acs <- 2e+07
gen <- 1000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue",
ylab = "Fitness", xlab = "Generations")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
points(0, 0.2, col = "red")
points(0, 0.2, col = "red", pch = "-")
me <- 0.03
u <- 1e-09
acs <- 2e+07
gen <- 1000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue",
ylab = "Fitness", xlab = "Generations")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
points(0, 0.2, col = "red", pch = "-")
points(0, 0.15, col = "blue", pch = "-")
points(0, 0.1, col = "blue", pch = "-")
me <- 0.03
u <- 1e-09
acs <- 2e+07
gen <- 1000
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue",
ylab = "Fitness", xlab = "Generations")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
points(0, 0.2, col = "red", pch = "-")
points(0, 0.1, col = "blue", pch = "-")
help(text)
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue",
ylab = "Fitness", xlab = "Generations")
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red")
points(0, 0.2, col = "red", pch = "-")
text(0, 0.2, pos = 4, labels = "Linear")
points(0, 0.1, col = "blue", pch = "-")
text(0, 0.1, pos = 4, labels = "Non-linear")
points(0, 0.2, col = "red", pch = "-", cex = 2)
points(0, 0.1, col = "blue", pch = "-", cex = 2)
plot(fit, type = "l", ylim = c(0,1), col = "blue",
ylab = "Fitness", xlab = "Generations", lwd = 2)
plot(fit, type = "l", ylim = c(0,1), col = "blue",
ylab = "Fitness", xlab = "Generations", lwd = 1.5)
fit <- c()
for (t in 1:gen) {
ml <- (1 - me)^(u * acs * t)
fit[t] <- ml
}
plot(fit, type = "l", ylim = c(0,1), col = "blue",
ylab = "Fitness", xlab = "Generations", lwd = 1.5)
fit <- c()
ml <- 0
for (t in 1:gen) {
ml <- ml + me*u*acs
w <- 1-ml
fit[t] <- w
}
lines(fit, col = "red", lwd = 1.5)
points(0, 0.2, col = "red", pch = "-", cex = 2)
text(0, 0.2, pos = 4, labels = "Linear")
points(0, 0.1, col = "blue", pch = "-", cex = 2)
text(0, 0.1, pos = 4, labels = "Non-linear")
library(RColorBrewer)
compute_lambda <- function(S_B, L, S_d = 0.03, N = 101) {
U <- 1e-8 * L  # Genomic mutation rate.
A <- matrix(0, nrow = N, ncol = N)
# Loop over mutation classes k = 0 to N-2.
for (k in 0:(N - 2)) {
f_k <- (1 + S_B) * ((1 - S_d)^k)
# Offspring remaining in class k.
A[k + 1, k + 1] <- f_k * (1 - U)
# Offspring acquiring one extra deleterious mutation (moving to class k+1).
A[k + 2, k + 1] <- f_k * U
}
# For the highest mutation class (k = N - 1), assume an absorbing state.
k <- N - 1
f_k <- (1 + S_B) * ((1 - S_d)^k)
A[N, N] <- f_k
lambda <- max(Re(eigen(A)$values))
return(lambda)
}
# Define parameter sequences.
S_b_values <- seq(0, 0.05, length.out = 100)
L_values   <- seq(0, 5e6, length.out = 100)
# Build the lambda matrix:
# Rows correspond to different L values and columns to S_b values.
lambda_matrix <- matrix(NA, nrow = length(L_values), ncol = length(S_b_values))
for (i in seq_along(L_values)) {
print(i)
for (j in seq_along(S_b_values)) {
lambda_matrix[i, j] <- compute_lambda(S_b_values[j], L_values[i], S_d = 0.03, N = 101)
}
}
diverge_pal <- colorRampPalette(brewer.pal(11, "RdBu"))(1000)
breaks_vec <- seq(0.95, 1.05, length.out = 1001)
# plotting.
image(y = S_b_values, x = L_values, z = lambda_matrix,
breaks = breaks_vec, col = diverge_pal,
ylab = expression(S[b]),
xlab = "Recombining region size, L (Mb)",
main = expression("PIA of " * lambda * " vs. " * S[b] * " and L"),
yaxt='n', xaxt='n',cex.lab = 1.6, cex.main = 1.8)
axis(2, at = seq(from = 0, to = 0.05, length.out=6),
labels = seq(from = 0, to = 0.05, length.out=6),
cex.axis = 1.5)
axis(1, at = seq(from = 0, to = 5e6, length.out=6),
labels = seq(from = 0, to = 5, length.out=6),
cex.axis = 1.5)
contour(y = S_b_values, x = L_values, z = lambda_matrix,
add = TRUE, drawlabels = TRUE, col = "black")
