###### Starting Conditions #########
N <- 1000 #population
loci <- 100 #positions on the genome
mu <- 10^-5 #human mutation rate 10^-9 for an individual nucleotide
baseval <- 10 # this is a base minimum value for our phenotype
loci.imp <- sort(sample(2:loci, 10))
opt <- 15
###### FUNCTIONS #########
GetPopulation <- function(N,loci){
# The numbers present in the matrix represent the genotype at a locus.
# First number is maternal and second is paternal
# 0,0 = 1
# 0,1 = 2
# 1,0 = 3
# 1,1 = 4
tot.loci <- N*loci
pop <- matrix(sample(1:4, tot.loci, replace=T), N, loci)
#set as female
pop[1:(N/2),1] <- 1
# set half as male
pop[(N/2 + 1):N,1] <- 2
# first column is sex determining locus with 1=XX 2=XY
# remaining columns are the rest of the genome
# each row in pop is one individual
return(pop)
}
# TODO We need to determine if this is giving us what we want with regard to the
# number of mutations being entered into the population.
MutatePop <- function(pop, mu){
# TODO add a comment that explains what this is the probability of a
# mutation at any given locus the probability of an individual having one
# mutation the average number of mutations per an individual?
mut.prob <- 1-(1-mu)^1547 # 1547 is the number of base pairs in the coding region of our genome (treating it as the length of a gene)
# TODO add a comment that explains what this does.
mut.coord <- which(matrix(runif(nrow(pop) * ncol(pop)), nrow = nrow(pop), ncol = ncol(pop)) < mut.prob, arr.ind = TRUE)
# This switch function applies the mutations as they are produced
apply_mutations <- function(pop, coordinates) {
# Create a function to apply the switch statement to a single element
apply_switch_single <- function(row_index, col_index) {
value <- pop[row_index, col_index]
pop[row_index, col_index] <- switch(value,
sample(c(2,3), 1),  #for 1
sample(c(1,4), 1),  #for 2
sample(c(1,4), 1),  #for 3
sample(c(2,3), 1))  #for 4
return(pop[row_index, col_index])  # return the updated value
}
# Apply the switch function to each row of coordinates and collect results
updated_values <- mapply(apply_switch_single, coordinates[,1], coordinates[,2])
# Update the pop matrix with the updated values
pop[coordinates] <- updated_values
return(pop)
}
mutants <- apply_switch(pop, mut.coord)
return(mutants)
}
GetPheno <- function(pop, loci.imp, baseval){
temppop <- pop[,loci.imp]
temppop[temppop==1] <- 0
temppop[temppop %in% c(2, 3)] <- 1
temppop[temppop == 4] <- 2
phenos <- rowSums(temppop) + baseval
return(phenos)
}
GetFit <- function(obs, opt, sigma){
numer <- (obs - opt)^2
denom <- (2 * sigma)^2
w <- exp(-(numer / denom))
return(w)
}
PickParents <- function(pop){
# TODO add in a probability for each parent
# you will need to split up the fitnesses for fathers and mothers
father <- sample(1:(as.numeric(nrow(pop))/2), size = 10, replace = T)
mother <- sample((as.numeric(nrow(pop)/2+1)):nrow(pop), size = 10, replace = T)
return(list(father,mother))
}
GetGametes <- function(parent){
# TODO go from a parent genome vector
# to a gamete genome vector
}
###### Running Sims ##########
pop <- GetPopulation(N = N, loci = loci)
pop2 <- MutatePop(pop = pop, mu = mu)
phenos <- GetPheno(pop = pop, loci.imp = loci.imp, baseval = baseval)
w <- GetFit(obs=phenos, opt=opt, sigma=2)
View(GetFit)
View(pop)
phenos
view(phenos)
phenos
w
###### END FUNCTIONS #########
hist(w)
sum(w)
mother <- pop[1:500]
father <- pop[501:1000]
mother
father
w
probabilities <- w
top_picks <- 100
pick_parent <- 100
selected_parents <- sample(length(w), size = pick_parent, replace = F, prob = w  )
selected_parents
for (i in 1:length(selected_parents)){
if(w[i] < 500) {
mother <- c(i)
else
selected_parents <- sample(length(w), size = pick_parent, replace = F, prob = w  )
debugSource("~/Documents/GitHub/epistatic-capacitance/forward_simulator.R")
debugSource("~/Documents/GitHub/epistatic-capacitance/forward_simulator.R")
debugSource("~/Documents/GitHub/epistatic-capacitance/forward_simulator.R")
###### Starting Conditions #########
N <- 1000 #population
loci <- 100 #positions on the genome
mu <- 10^-5 #human mutation rate 10^-9 for an individual nucleotide
baseval <- 10 # this is a base minimum value for our phenotype
loci.imp <- sort(sample(2:loci, 10))
opt <- 15
pick_parent <- 100
# Helper Functions #
apply_switch <- function(pop, coordinates) {
# Create a function to apply the switch statement to a single element
apply_switch_single <- function(row_index, col_index) {
value <- pop[row_index, col_index]
pop[row_index, col_index] <- switch(value,
sample(c(2,3), 1),  #for 1
sample(c(1,4), 1),  #for 2
sample(c(1,4), 1),  #for 3
sample(c(2,3), 1))  #for 4
return(pop[row_index, col_index])  # return the updated value
}
# Apply the function to each row of coordinates and collect results
updated_values <- mapply(apply_switch_single, coordinates[,1], coordinates[,2])
# Update the pop matrix with the updated values
pop[coordinates] <- updated_values
return(pop)
}
GetPopulation <- function(N,loci){
# The numbers present in the matrix represent the genotype at a locus.
# First number is maternal and second is paternal
# 0,0 = 1
# 0,1 = 2
# 1,0 = 3
# 1,1 = 4
tot.loci <- N*loci
pop <- matrix(sample(1:4, tot.loci, replace=T), N, loci)
#set as female
pop[1:(N/2),1] <- 1
# set half as male
pop[(N/2 + 1):N,1] <- 2
# first column is sex determining locus with 1=XX 2=XY
# remaining columns are the rest of the genome
# each row in pop is one individual
return(pop)
}
# TODO We need to determine if this is giving us what we want with regard to the
# number of mutations being entered into the population.
MutatePop <- function(pop, mu){
# TODO add a comment that explains what this is the probability of a
# mutation at any given locus the probability of an individual having one
# mutation the average number of mutations per an individual?
mut.prob <- 1-(1-mu)^1547 # 1547 is the number of base pairs in the coding region of our genome (treating it as the length of a gene)
# TODO add a comment that explains what this does.
mut.coord <- which(matrix(runif(nrow(pop) * ncol(pop)), nrow = nrow(pop), ncol = ncol(pop)) < mut.prob, arr.ind = TRUE)
# This switch function applies the mutations as they are produced
apply_mutations <- function(pop, coordinates) {
# Create a function to apply the switch statement to a single element
apply_switch_single <- function(row_index, col_index) {
value <- pop[row_index, col_index]
pop[row_index, col_index] <- switch(value,
sample(c(2,3), 1),  #for 1
sample(c(1,4), 1),  #for 2
sample(c(1,4), 1),  #for 3
sample(c(2,3), 1))  #for 4
return(pop[row_index, col_index])  # return the updated value
}
# Apply the switch function to each row of coordinates and collect results
updated_values <- mapply(apply_switch_single, coordinates[,1], coordinates[,2])
# Update the pop matrix with the updated values
pop[coordinates] <- updated_values
return(pop)
}
mutants <- apply_switch(pop, mut.coord)
return(mutants)
}
GetPheno <- function(pop, loci.imp, baseval){
temppop <- pop[,loci.imp]
temppop[temppop==1] <- 0
temppop[temppop %in% c(2, 3)] <- 1
temppop[temppop == 4] <- 2
phenos <- rowSums(temppop) + baseval
return(phenos)
}
GetFit <- function(obs, opt, sigma){
numer <- (obs - opt)^2
denom <- (2 * sigma)^2
w <- exp(-(numer / denom))
return(w)
}
PickParents <- function(pop){
mother <- c()
father <- c()
selected_parents <- sample(length(w), size = pick_parent, replace = F, prob = w  )
for (i in 1:length(selected_parents)){
if(selected_parents[i] < 500) {
mother <- c(mother, selected_parents[i])
} else {
father <- c(father, selected_parents[i])
}
}
return(mother,father)
}
View(PickParents)
###### Running Sims ##########
pop <- GetPopulation(N = N, loci = loci)
pop2 <- MutatePop(pop = pop, mu = mu)
phenos <- GetPheno(pop = pop, loci.imp = loci.imp, baseval = baseval)
w <- GetFit(obs=phenos, opt=opt, sigma=2)
PickParents <- function(pop){
mother <- c()
father <- c()
selected_parents <- sample(length(w), size = pick_parent, replace = F, prob = w  )
for (i in 1:length(selected_parents)){
if(selected_parents[i] < 500) {
mother <- c(mother, selected_parents[i])
} else {
father <- c(father, selected_parents[i])
}
}
return(mother,father)
}
PickParents <- function(pop){
mother <- c()
father <- c()
selected_parents <- sample(length(w), size = pick_parent, replace = F, prob = w  )
for (i in 1:length(selected_parents)){
if(selected_parents[i] < 500) {
mother <- c(mother, selected_parents[i])
} else {
father <- c(father, selected_parents[i])
}
}
return(list(mother=mother,father=father)
}
View(pop2)
View(pop)
mother <- c()
father <- c()
selected_parents <- sample(length(w), size = 1000, replace = F, prob = w  )
for (i in 1:length(selected_parents)){
if(selected_parents[i] < 500) {
mother <- c(mother, selected_parents[i])
} else {
father <- c(father, selected_parents[i])
}
}
PickParents <- function(pop){
mother <- c()
father <- c()
selected_parents <- sample(length(w), size = 500, replace = F, prob = w  )
}
selected_parents <- sample(length(w), size = 500, replace = F, prob = w  )
if (selected_parents>500) {
father<-c()
}else {
mother <- c()
}
if (selected_parents[i] >500) {
father<-c (father, selected_parents[i])
}else {
mother <- c(mother, selected_parents[i])
}
mother <- c()
father <- c()
selected_parents <- sample(length(w), size = 500, replace = FALSE, prob = w  )
PickParents <- function(pop, w){
mother <- c()
father <- c()
selected_parents <- sample(length(w), size = 500, replace = FALSE, prob = w  )
}
if (selected_parents[i] >500) {
father<-c (father, selected_parents[i])
}else {
mother <- c(mother, selected_parents[i])
}
p
p
if (selected_parents[i] >=500) {
father<-c (father, selected_parents[i])
}else {
mother <- c(mother, selected_parents[i])
}
source("~/Documents/GitHub/epistatic-capacitance/forward_simulator.R")
